{
  "title": "My Experience",
  "description": "Since 2023, I’ve been working with my very first client on a complex and challenging project.",
  "image": "/my-experience.png",
  "hidden": true,
  "body": {
    "raw": "\nSince 2023, I’ve been working with my very first client on a `complex` and `challenging` project. As the lead developer from the start, I was responsible for building the website and implementing several intricate features, including:\n\n- Trimming and cropping elements.\n- Managing stored data across the entire site.\n- Developing seamless animations between panels, which turned out fantastic.\n- Exporting edited videos, initially using FFmpeg before transitioning this task to the backend for improved performance.\n- Creating smooth page animations.\n- Ensuring responsive design on various pages.\n\nThis project allowed me to tackle new challenges, expand my skill set, and deliver high-quality results.\n\nThroughout the project, I encountered several key challenges, including:\n\n- Animations not working properly in Safari.\n- Issues with exporting images in Safari.\n- Perfecting the trimming tool for better functionality.\n- Frequent \"application errors\" that occasionally broke the website.\n- Finding the best approach for storing and managing data efficiently.\n- Getting 8 frames of a video + Converting video url to blob url\n- Creating a pixel-perfect website: One of the Figma design values was 12.31131px, which I initially implemented. However, my client suggested rounding it off for a cleaner look.\n\nThe project involved posting and scheduling content across various social media platforms, including Shorts, Stories, Photos, Long Videos, and Texts. My primary challenge was to establish an effective data flow for storing post details.\n\nI explored numerous approaches to reach our current solution. Initially, I attempted to use separate data structures for each post type, but I quickly found this method overwhelming and code-intensive. After several iterations, I discovered that a more efficient solution was to use a single data structure for the first four post types, while keeping a separate structure for text posts. This approach significantly streamlined the code and improved overall data management.\n\nI am grateful to be a member of this project, as it has provided me with numerous learning opportunities.\n\nI noticed that our backend team is using FastAPI, and I have experience working with APIs, including how to cache and utilize them effectively.\n",
    "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),w=(i,e)=>{for(var t in e)o(i,t,{get:e[t],enumerable:!0})},l=(i,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(i,r)&&r!==t&&o(i,r,{get:()=>e[r],enumerable:!(a=g(e,r))||a.enumerable});return i};var y=(i,e,t)=>(t=i!=null?p(m(i)):{},l(e||!i||!i.__esModule?o(t,\"default\",{value:i,enumerable:!0}):t,i)),x=i=>l(o({},\"__esModule\",{value:!0}),i);var c=v((j,s)=>{s.exports=_jsx_runtime});var I={};w(I,{default:()=>h,frontmatter:()=>b});var n=y(c()),b={title:\"My Experience\",description:\"Since 2023, I\\u2019ve been working with my very first client on a complex and challenging project.\",image:\"/my-experience.png\",hidden:!0};function d(i){let e={code:\"code\",li:\"li\",p:\"p\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Since 2023, I\\u2019ve been working with my very first client on a \",(0,n.jsx)(e.code,{children:\"complex\"}),\" and \",(0,n.jsx)(e.code,{children:\"challenging\"}),\" project. As the lead developer from the start, I was responsible for building the website and implementing several intricate features, including:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Trimming and cropping elements.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Managing stored data across the entire site.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Developing seamless animations between panels, which turned out fantastic.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Exporting edited videos, initially using FFmpeg before transitioning this task to the backend for improved performance.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Creating smooth page animations.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Ensuring responsive design on various pages.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"This project allowed me to tackle new challenges, expand my skill set, and deliver high-quality results.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Throughout the project, I encountered several key challenges, including:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Animations not working properly in Safari.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Issues with exporting images in Safari.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Perfecting the trimming tool for better functionality.\"}),`\n`,(0,n.jsx)(e.li,{children:'Frequent \"application errors\" that occasionally broke the website.'}),`\n`,(0,n.jsx)(e.li,{children:\"Finding the best approach for storing and managing data efficiently.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Getting 8 frames of a video + Converting video url to blob url\"}),`\n`,(0,n.jsx)(e.li,{children:\"Creating a pixel-perfect website: One of the Figma design values was 12.31131px, which I initially implemented. However, my client suggested rounding it off for a cleaner look.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The project involved posting and scheduling content across various social media platforms, including Shorts, Stories, Photos, Long Videos, and Texts. My primary challenge was to establish an effective data flow for storing post details.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I explored numerous approaches to reach our current solution. Initially, I attempted to use separate data structures for each post type, but I quickly found this method overwhelming and code-intensive. After several iterations, I discovered that a more efficient solution was to use a single data structure for the first four post types, while keeping a separate structure for text posts. This approach significantly streamlined the code and improved overall data management.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I am grateful to be a member of this project, as it has provided me with numerous learning opportunities.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I noticed that our backend team is using FastAPI, and I have experience working with APIs, including how to cache and utilize them effectively.\"})]})}function h(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(d,{...i})}):d(i)}return x(I);})();\n;return Component;"
  },
  "_id": "blogs/my-experience.mdx",
  "_raw": {
    "sourceFilePath": "blogs/my-experience.mdx",
    "sourceFileName": "my-experience.mdx",
    "sourceFileDir": "blogs",
    "contentType": "mdx",
    "flattenedPath": "blogs/my-experience"
  },
  "type": "Blogs",
  "slug": "/blogs/my-experience",
  "slugAsParams": "my-experience",
  "folder": "blogs"
}